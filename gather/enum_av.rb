##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Post

  include Msf::Post::Windows::Registry
  include Msf::Auxiliary::Report

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Windows Gather Antivirus',
      'Description'   => %q{
          This module will allow the user to list any antivirus (from database below) running on the remote machine.},
      'License'       => MSF_LICENSE,
      'Author'        => ['ByteZealot'],
      'Platform'      => ['win']
    ))
  end


  def run
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    avList = ["ALYac", "AVG", "AVware", "Ad-Aware", "AegisLab", "AhnLab-V3", "Alibaba", "Antiy-AVL", "Arcabit", "Avast", "Avira (nocloud)", "Baidu", "BitDefender", "Bkav", "CAT-QuickHeal", "CMC", "ClamAV", "Comodo", "CrowdStrike Falcon", "Cyren", "DrWeb", "ESET-NOD32", "Emsisoft", "F-Prot", "F-Secure", "Fortinet", "GData", "Ikarus", "Invincea", "Jiangmin", "K7AntiVirus", "K7GW", "Kaspersky", "Kingsoft", "Malwarebytes", "McAfee", "McAfee-GW-Edition", "eScan", "NANO-Antivirus", "Panda", "Qihoo-360", "Rising", "SUPERAntiSpyware", "Sophos", "Symantec", "Tencent", "TheHacker", "TrendMicro", "TrendMicro-HouseCall", "Trustlook", "VBA32", "VIPRE", "ViRobot", "WhiteArmor", "Yandex", "Zillya", "Zoner", "nProtect"]

        tbl = Rex::Text::Table.new(
      'Header'  => "Installed Applications",
      'Indent'  => 1,
      'Columns' =>
      [
        "Name",
        "Version"
      ])
    appkeys = [
      'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall',
      'HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall',
      'HKLM\\SOFTWARE\\WOW6432NODE\\Microsoft\\Windows\\CurrentVersion\\Uninstall',
      'HKCU\\SOFTWARE\\WOW6432NODE\\Microsoft\\Windows\\CurrentVersion\\Uninstall',
      ]
    apps = []
    appkeys.each do |keyx86|
      found_keys = registry_enumkeys(keyx86)
      if found_keys
        found_keys.each do |ak|
          apps << keyx86 +"\\" + ak
        end
      end
    end

    t = []
    while(not apps.empty?)

      1.upto(16) do
        t << framework.threads.spawn("Module(#{self.refname})", false, apps.shift) do |k|
          begin
            dispnm = registry_getvaldata("#{k}","DisplayName")
            dispversion = registry_getvaldata("#{k}","DisplayVersion")
            tbl << [dispnm,dispversion] if dispnm and dispversion
          rescue
          end
        end

      end
      t.map{|x| x.join }
    end

    result = tbl.to_s
    print_status(result)

    lResult = result.downcase

    container = []
    iLocation = 0
    while iLocation < avList.size
      included = false
      included = lResult.include? avList[iLocation].downcase
      if included == true
        container.append(avList[iLocation])
      end
      iLocation += 1
    end

    if container.size > 0
      print("\n")
      hits = 0
      while hits < container.size
        print_good("Found an AV called: " + container[hits])
        hits += 1
      end
    else
      print_status("It seems that no AV is installed on the machine...")
    end

    print("\n")
  end

end

